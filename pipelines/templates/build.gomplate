# load the config provided when evaluating the template
{{ $config := (datasource "config") }}
---
resource_types:

- name: slack-alert
  type: docker-image
  source:
    repository: arbourd/concourse-slack-alert-resource

  
resources:
- name: notify
  type: slack-alert
  source:
    url: "((slack_api))"
    channel: {{ $config.slack.channel | quote }}
    disable: {{ not $config.slack.enabled }}

{{ range $_, $repo := $config.repositories }}
- name: {{$repo.name}}
  check_every: 10m
  type: git
  source:
    uri: https://github.com/mocaccinoOS/{{$repo.project}}
    branch: {{$repo.branch}}
{{ end }}

jobs:
{{ range $_, $repo := $config.repositories }}
  - name: build-{{$repo.name}}
    serial_groups: [{{$repo.name}}]
    plan:
      - get: {{$repo.name}}
        trigger: true
        
      - task: run-mottainai-task
        timeout: 5h30m

        input_mapping:
         repository: {{$repo.name}}
        config:
          inputs:
          - name: repository
          platform: linux
          image_resource:
            type: registry-image
            source: { repository: quay.io/mocaccino/extra }
          params:
           {{- if eq $repo.arch "arm" }}
            REPO_CACHE: "mocaccinoos/micro-arm-cache"
           {{- end }}
          run:
            path: "/bin/sh"
            args: 
            - -ce
            - |
                ls -liah
                ls -liah repository
                luet uninstall -y repository/mocaccino-extra repository/mocaccino-micro repository/mocaccino-musl-universe
                luet install -y repository/mocaccino-extra-stable repository/mocaccino-micro-stable repository/mocaccino-musl-universe-stable
               
                luet install -y system/luet-extensions development/make dev-util/mottainai-cli vcs/git shells/bash utils/jq net-fs/minio-client

                cat <<"EOB" | bash -e
                REF=$(cat repository/.git/ref)

                mc alias set minio-ci ((minio_url)) ((minio_id)) ((minio_secret))
                mottainai-cli profile create build http://mottainai.mottainai-prod.svc.cluster.local ((mottainai_api_key))

                # Luet tree package list
                #PKG_LIST=$(luet tree pkglist --tree repository/ -o json)
                if [ -e "repository/packages" ]; then 
                    export TREE="repository/packages"
                    PKG_LIST=$(luet tree pkglist --tree repository/packages -o json)
                else 
                    export TREE="repository/multi-arch repository/{{$repo.arch}}"
                    PKG_LIST=$(luet tree pkglist --tree repository/multi-arch --tree repository/{{$repo.arch}} -o json)
                fi  

                PACKS=""
                # For each package in the tree, get the path where the spec resides
                # e.g. packages/acct-group/amavis/0/
                for i in $(echo "$PKG_LIST" | jq -rc '.packages[]'); do

                    PACKAGE_PATH=$(echo "$i" | jq -r ".path")
                    PACKAGE_NAME=$(echo "$i" | jq -r ".name")
                    PACKAGE_CATEGORY=$(echo "$i" | jq -r ".category")
                    PACKAGE_VERSION=$(echo "$i" | jq -r ".version")

                    if mc ls minio-ci/{{$repo.bucket}}/ | grep "$PACKAGE_NAME\-$PACKAGE_CATEGORY\-$PACKAGE_VERSION.package"; then
                        echo "Package $PACKAGE_CATEGORY/$PACKAGE_NAME already present, skipping"
                        continue
                    fi
          
                    PACKS="$PACKS $PACKAGE_CATEGORY/$PACKAGE_NAME"
               
                {{- if $repo.smart }}
                done

                BUILDSEQUENCE=$(FORMAT=json luet parallel-tools-commondeps $PACKS)

                echo "Buildsequence: $BUILDSEQUENCE"

                for i in $(echo "$BUILDSEQUENCE" | jq  -rc '.[][]'); do
                
                TOCOMPILE=$(echo "$i" | jq -rc '.[]'  | xargs echo)
                echo "Building $TOCOMPILE and waiting"

                # Send tasks in parallel, and wait for them
                for package in $TOCOMPILE; do
                IFS=/ read -a parts <<< $package
                PACKAGE_CATEGORY=${parts[0]}
                PACKAGE_NAME=${parts[1]}
                PACKAGE_VERSION=$(echo "$PKG_LIST" | jq -r ".packages[] | select(.name==\"$PACKAGE_NAME\" and .category==\"$PACKAGE_CATEGORY\").version")

                if mc ls minio-ci/{{$repo.bucket}}/ | grep "$PACKAGE_NAME\-$PACKAGE_CATEGORY\-$PACKAGE_VERSION.package"; then
                        echo "Package $PACKAGE_CATEGORY/$PACKAGE_NAME already present, skipping"
                        continue 1
                fi

                {{- end }}
                
                cat << EOF >task.yaml
                name: "Build $PACKAGE_CATEGORY/${PACKAGE_NAME}@${PACKAGE_VERSION} from {{$repo.name}} to minio"
                image: mocaccino/builder
                type: lxd
                {{- if eq $repo.arch "arm" }}
                queue: arm_lxd
                {{- else }}
                queue: lxd
                {{- end }}
                storage: 'creds'
                environment:
                - "SUDO="
                - CLEAN={{$repo.clean}}
                - REPO=https://github.com/mocaccinoOS/{{$repo.project}}.git
                - BRANCH=$REF
                - PACKAGES=$PACKAGE_CATEGORY/$PACKAGE_NAME
                - MINIO_ID=((minio_id))
                - DOCKER_BUILDKIT={{$repo.buildkit}}
                - MINIO_SECRET=((minio_secret))
                - MINIO_URL=((minio_url))
                - LUET_YES=true
                script:
                - sleep 5
                {{- if eq $repo.arch "arm" }}
                # Temporary workaround for delay on DHCP response
                - sleep 4
                # stop systemd-networkd to drop iface address from docker0
                # NOTE: this is needed until we use sabayon/builder-arm image
                - echo "[Match]" >> /etc/systemd/network/default_dhcp.network
                - echo 'Name=eth*' >> /etc/systemd/network/default_dhcp.network
                - systemctl daemon-reload
                - systemctl restart systemd-networkd
                - systemctl start docker
                - sleep 10
                - systemctl status docker
                - ip a
                {{- end }}
                - source /etc/profile
                - source storage/env
                - echo "Logging to minio"
                - systemctl start docker
                - echo "Docker started"
                - mkdir -p \$HOME/.docker
                - 'echo "{\"experimental\": \"enabled\",\"auths\": { \"https://index.docker.io/v1/\": {}}}" > \$HOME/.docker/config.json'
                - docker login -u \$DOCKER_USER -p \$DOCKER_PASSWORD
                {{- if eq $repo.arch "arm" }}
                - wget https://downloads.svc.sabayon.org/luet-cross-bin/luet-latest-linux-arm -O /usr/bin/luet && chmod a+x /usr/bin/luet
                - wget https://dl.minio.io/client/mc/release/linux-arm/mc -O /usr/bin/mc && chmod +x /usr/bin/mc 
                {{- else }}
                - luet upgrade
                {{- end }}
                - mc alias set minio-ci \$MINIO_URL \$MINIO_ID \$MINIO_SECRET
                - git clone \$REPO ./luet-repo && cd luet-repo && git checkout \$BRANCH -b build
                - mkdir \$PWD/build
                - chmod -R 777 \$PWD/build
                - mc mirror  --exclude '*.gz' minio-ci/{{$repo.bucket}}/ \$PWD/build
                - BUILD_ARGS="--emoji=false --color=false --pull --only-target-package --push --config ./conf/luet.yaml --skip-if-metadata-exists=true" make rebuild
                - mc cp --recursive \$PWD/build/ minio-ci/{{$repo.bucket}}/
                - ls -l build
                EOF
                mottainai-cli -p build task create --yaml task.yaml

                {{- if $repo.smart }}
                done # Done tocompile

                # Now let's wait
                for package in $TOCOMPILE; do
                  IFS=/ read -a parts <<< $package
                  PACKAGE_CATEGORY=${parts[0]}
                  PACKAGE_NAME=${parts[1]}
                  PACKAGE_VERSION=$(echo "$PKG_LIST" | jq -r ".packages[] | select(.name==\"$PACKAGE_NAME\" and .category==\"$PACKAGE_CATEGORY\").version")

                  echo "Checking package $PACKAGE_CATEGORY/$PACKAGE_NAME @ $PACKAGE_VERSION is built"
                  while ! ( mc ls minio-ci/{{$repo.bucket}}/ | grep "$PACKAGE_NAME\-$PACKAGE_CATEGORY\-$PACKAGE_VERSION.package" )
                  do
                      echo "Package $PACKAGE_CATEGORY/$PACKAGE_NAME @ $PACKAGE_VERSION not built yet, sleeping"
                      sleep 20
                  done
                done # Done waiting
                {{- end }}

                done # Done build sequence
                EOB
      - task: wait-for-packages
        timeout: 1h30m
        input_mapping:
         repository: {{$repo.name}}
        config:
          inputs:
          - name: repository
          platform: linux
          image_resource:
            type: registry-image
            source: { repository: quay.io/mocaccino/extra }
          run:
            path: "/bin/sh"
            args: 
            - -ce
            - |
                ls -liah
                ls -liah repository
                REF=$(cat repository/.git/ref)
                luet uninstall -y repository/mocaccino-extra repository/mocaccino-micro repository/mocaccino-musl-universe
                luet install -y repository/mocaccino-extra-stable repository/mocaccino-micro-stable repository/mocaccino-musl-universe-stable
                luet install -y development/make dev-util/mottainai-cli vcs/git shells/bash utils/jq net-fs/minio-client
                mc alias set minio-ci ((minio_url)) ((minio_id)) ((minio_secret))
               
                # Luet tree package list
                #PKG_LIST=$(luet tree pkglist --tree repository/ -o json)
                if [ -e "repository/packages" ]; then 
                    PKG_LIST=$(luet tree pkglist --tree repository/packages -o json)
                else 
                    PKG_LIST=$(luet tree pkglist --tree repository/multi-arch --tree repository/{{$repo.arch}} -o json)
                fi  

                # For each package in the tree, get the path where the spec resides
                # e.g. packages/acct-group/amavis/0/
                for i in $(echo "$PKG_LIST" | jq -rc '.packages[]'); do

                    PACKAGE_PATH=$(echo "$i" | jq -r ".path")
                    PACKAGE_NAME=$(echo "$i" | jq -r ".name")
                    PACKAGE_CATEGORY=$(echo "$i" | jq -r ".category")
                    PACKAGE_VERSION=$(echo "$i" | jq -r ".version")
                    echo "Checking package $PACKAGE_CATEGORY/$PACKAGE_NAME @ $PACKAGE_VERSION is built"
                    while ! ( mc ls minio-ci/{{$repo.bucket}}/ | grep "$PACKAGE_NAME\-$PACKAGE_CATEGORY\-$PACKAGE_VERSION.package" )
                    do
                        echo "Package $PACKAGE_CATEGORY/$PACKAGE_NAME @ $PACKAGE_VERSION not built yet, sleeping"
                        sleep 20
                    done
                done

      {{- if $repo.prune }}
      - task: prune-repo
        input_mapping:
         repository: {{$repo.name}}
        config:
          inputs:
          - name: repository
          platform: linux
          image_resource:
            type: registry-image
            source: { repository: quay.io/mocaccino/extra }
          run:
            path: "/bin/sh"
            args: 
            - -ce
            - |
                luet uninstall -y repository/mocaccino-extra repository/mocaccino-micro repository/mocaccino-musl-universe
                luet install -y repository/mocaccino-extra-stable repository/mocaccino-micro-stable repository/mocaccino-musl-universe-stable
                luet install -y development/make dev-util/mottainai-cli vcs/git shells/bash utils/jq net-fs/minio-client
                mc alias set minio-ci ((minio_url)) ((minio_id)) ((minio_secret))
               
                # Luet tree package list
                #PKG_LIST=$(luet tree pkglist --tree repository/ -o json)
                if [ -e "repository/packages" ]; then 
                    PKG_LIST=$(luet tree pkglist --tree repository/packages -o json)
                else 
                    PKG_LIST=$(luet tree pkglist --tree repository/multi-arch --tree repository/{{$repo.arch}} -o json)
                fi  
                echo "Pruning old packages from repository"
                for a in $(mc find minio-ci/{{$repo.bucket}} --regex '.*.package.*|.*.metadata.yaml$' --json |  jq -r '.key' ); do

                    # For each package in the tree, get the path where the spec resides
                    # e.g. packages/acct-group/amavis/0/
                    for i in $(echo "$PKG_LIST" | jq -rc '.packages[]'); do

                        PACKAGE_PATH=$(echo "$i" | jq -r ".path")
                        PACKAGE_NAME=$(echo "$i" | jq -r ".name")
                        PACKAGE_CATEGORY=$(echo "$i" | jq -r ".category")
                        PACKAGE_VERSION=$(echo "$i" | jq -r ".version")
                        if echo $a | grep -q "$PACKAGE_NAME\-$PACKAGE_CATEGORY\-$PACKAGE_VERSION"; then
                            continue 2
                        fi
                    done

                # echo "$a pending deletion"
                mc rm $a

                done

      {{- end }}
  - name: create-repo-{{$repo.name}}
    serial_groups: [{{$repo.name}}]
    plan:
      - get: {{$repo.name}}
        passed: [build-{{$repo.name}}]
        trigger: true
        
      - task: create-repo
        input_mapping:
         repository: {{$repo.name}}
        config:
          inputs:
          - name: repository
          platform: linux
          image_resource:
            type: registry-image
            source: { repository: quay.io/mocaccino/extra }
          run:
            path: "/bin/sh"
            args: 
            - -ce
            - |
                export SUDO=
                ls -liah
                ls -liah repository
                luet uninstall -y repository/mocaccino-extra repository/mocaccino-micro repository/mocaccino-musl-universe
                luet install -y repository/mocaccino-extra-stable repository/mocaccino-micro-stable repository/mocaccino-musl-universe-stable
                luet install -y development/make dev-util/mottainai-cli vcs/git shells/bash utils/jq net-fs/minio-client
                mc alias set minio-ci ((minio_url)) ((minio_id)) ((minio_secret))
               
                cd repository/
                mkdir build
                mc mirror  --exclude '*.gz' minio-ci/{{$repo.bucket}}/ build
                ls -liah build/
                make create-repo
                mc cp --recursive build/ minio-ci/{{$repo.bucket}}/
                ls -liah build/

{{- if $repo.qa }}
  - name: qa-repo-{{$repo.name}}
    serial_groups: [{{$repo.name}}]
    plan:
      - get: {{$repo.name}}
        passed: [create-repo-{{$repo.name}}]
        trigger: true
        
      - task: qa
        timeout: 4h30m
        input_mapping:
         repository: {{$repo.name}}
        config:
          inputs:
          - name: repository
          platform: linux
          image_resource:
            type: registry-image
            source: { repository: quay.io/mocaccino/extra }
          run:
            path: "/bin/sh"
            args: 
            - -ce
            - |
                ls -liah repository
                luet uninstall -y repository/mocaccino-extra repository/mocaccino-micro repository/mocaccino-musl-universe
                luet install -y repository/mocaccino-extra-stable repository/mocaccino-micro-stable repository/mocaccino-musl-universe-stable
                luet install -y utils/jq shells/bash dev-util/mottainai-cli vcs/git shells/bash utils/jq net-fs/minio-client
                mottainai-cli profile create build http://mottainai.mottainai-prod.svc.cluster.local ((mottainai_api_key))
                mc alias set minio-ci ((minio_url)) ((minio_id)) ((minio_secret))

                # Luet tree package list
                #PKG_LIST=$(luet tree pkglist --tree repository/ -o json)
                if [ -e "repository/packages" ]; then 
                    PKG_LIST=$(luet tree pkglist --tree repository/packages -o json)
                else 
                    PKG_LIST=$(luet tree pkglist --tree repository/multi-arch --tree repository/{{$repo.arch}} -o json)
                fi  

                # For each package in the tree, get the path where the spec resides
                # e.g. packages/acct-group/amavis/0/
                for i in $(echo "$PKG_LIST" | jq -rc '.packages[]'); do

                    PACKAGE_PATH=$(echo "$i" | jq -r ".path")
                    PACKAGE_NAME=$(echo "$i" | jq -r ".name")
                    PACKAGE_CATEGORY=$(echo "$i" | jq -r ".category")
                    PACKAGE_VERSION=$(echo "$i" | jq -r ".version")
                    if mc ls minio-ci/{{$config.qa.bucket}}/ | grep "$PACKAGE_CATEGORY-$PACKAGE_NAME-$PACKAGE_VERSION.success"; then
                        echo "Package $PACKAGE_CATEGORY/$PACKAGE_NAME already qaed, skipping"
                        continue
                    fi
          
                    cat << EOF >task.yaml
                name: "QA $PACKAGE_CATEGORY/$PACKAGE_NAME"
                image: mocaccino/qa
                type: lxd
                queue: lxd
                environment:
                - MINIO_ID=((minio_id))
                - MINIO_SECRET=((minio_secret))
                - MINIO_URL=((minio_url))
                script:
                - sleep 5
                - source /etc/profile
                - mkdir /qa
                - luet upgrade -y
                - luet install -y net-fs/minio-client
                - mc alias set minio-ci \$MINIO_URL \$MINIO_ID \$MINIO_SECRET
                {{- if $config.qa.from_repo }}
                - git clone {{ $config.qa.repo }} qa
                - TMPDIR=/qa charty start qa/{{ $config.qa.path }} --set "packages[0]=$PACKAGE_CATEGORY/$PACKAGE_NAME" --set 'luet_version={{$config.qa.luet_version}}' --set "debug=true"
                {{- else }}
                - TMPDIR=/qa charty start {{$config.qa.chart}} --set "packages[0]=$PACKAGE_CATEGORY/$PACKAGE_NAME" --set 'luet_version={{$config.qa.luet_version}}' --set "debug=true"
                {{- end }}
                - touch $PACKAGE_CATEGORY-$PACKAGE_NAME-$PACKAGE_VERSION.success
                - mc cp --recursive *.success minio-ci/{{$config.qa.bucket}}/
                EOF
                    mottainai-cli -p build task create --yaml task.yaml
                done

                for i in $(echo "$PKG_LIST" | jq -rc '.packages[]'); do

                    PACKAGE_PATH=$(echo "$i" | jq -r ".path")
                    PACKAGE_NAME=$(echo "$i" | jq -r ".name")
                    PACKAGE_CATEGORY=$(echo "$i" | jq -r ".category")
                    PACKAGE_VERSION=$(echo "$i" | jq -r ".version")
                    echo "Checking package $PACKAGE_CATEGORY/$PACKAGE_NAME @ $PACKAGE_VERSION is processed"
                    while ! ( mc ls minio-ci/{{$config.qa.bucket}}/ | grep "$PACKAGE_CATEGORY-$PACKAGE_NAME-$PACKAGE_VERSION.success" )
                    do
                        echo "Package $PACKAGE_CATEGORY/$PACKAGE_NAME @ $PACKAGE_VERSION not qaed yet, sleeping"
                        sleep 20
                    done
                done
  - name: publish-stable-repo-{{$repo.name}}
    serial_groups: [{{$repo.name}}]
    plan:
      - get: {{$repo.name}}
        passed: [qa-repo-{{$repo.name}}]
        trigger: true
        
      - task: publish
        config:
          platform: linux
          image_resource:
            type: registry-image
            source: { repository: quay.io/mocaccino/extra }
          run:
            path: "/bin/sh"
            args: 
            - -ce
            - |
                luet uninstall -y repository/mocaccino-extra repository/mocaccino-micro repository/mocaccino-musl-universe
                luet install -y repository/mocaccino-extra-stable repository/mocaccino-micro-stable repository/mocaccino-musl-universe-stable
                luet install -y development/make dev-util/mottainai-cli vcs/git shells/bash utils/jq net-fs/minio-client
                mc alias set minio-ci ((minio_url)) ((minio_id)) ((minio_secret))
                mc mirror --overwrite --remove minio-ci/{{$repo.bucket}} minio-ci/{{$repo.bucket}}-stable
      - put: notify
        params:
          message: "New {{$repo.bucket}} is available!"
          color: "#eeeeee"
          alert_type: success
{{- end }}
{{ end }}
