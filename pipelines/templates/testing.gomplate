# load the config provided when evaluating the template
{{ $config := (datasource "config") }}
---
 
resources:
{{ range $_, $repo := $config.repositories }}
- name: {{$repo.name}}
  check_every: 10m
  type: git
  source:
    uri: https://github.com/mocaccinoOS/{{$repo.project}}
    branch: {{$repo.branch}}
{{ end }}

jobs:
{{ range $_, $repo := $config.repositories }}
  - name: build-{{$repo.name}}
    serial_groups: [{{$repo.name}}]
    plan:
      - get: {{$repo.name}}
        trigger: true
        
      - task: run-mottainai-task
        timeout: 5h30m

        input_mapping:
         repository: {{$repo.name}}
        config:
          inputs:
          - name: repository
          platform: linux
          image_resource:
            type: registry-image
            source: { repository: quay.io/mocaccino/extra }
          params:
           {{- if eq $repo.arch "arm" }}
            REPO_CACHE: "mocaccinoos/micro-arm-cache"
           {{- end }}
          run:
            path: "/bin/sh"
            args: 
            - -ce
            - |
                ls -liah
                ls -liah repository
                luet uninstall -y repository/mocaccino-extra repository/mocaccino-micro repository/mocaccino-musl-universe
                luet install -y repository/mocaccino-extra-stable repository/mocaccino-micro-stable repository/mocaccino-musl-universe-stable
               
                luet install -y system/luet-extensions development/make dev-util/mottainai-cli vcs/git shells/bash utils/jq net-fs/minio-client

                cat <<"EOB" | bash -e
                REF=$(cat repository/.git/ref)

                mc alias set minio-ci ((minio_url)) ((minio_id)) ((minio_secret))
                mottainai-cli profile create build ((mottainai_api_url)) ((mottainai_api_key))

                # Luet tree package list
                #PKG_LIST=$(luet tree pkglist --tree repository/ -o json)
                if [ -e "repository/packages" ]; then 
                    export TREE="repository/packages"
                    PKG_LIST=$(luet tree pkglist --tree repository/packages -o json)
                else 
                    export TREE="repository/multi-arch repository/{{$repo.arch}}"
                    PKG_LIST=$(luet tree pkglist --tree repository/multi-arch --tree repository/{{$repo.arch}} -o json)
                fi  

                PACKS=""
                # For each package in the tree, get the path where the spec resides
                # e.g. packages/acct-group/amavis/0/
                for i in $(echo "$PKG_LIST" | jq -rc '.packages[]'); do

                    PACKAGE_PATH=$(echo "$i" | jq -r ".path")
                    PACKAGE_NAME=$(echo "$i" | jq -r ".name")
                    PACKAGE_CATEGORY=$(echo "$i" | jq -r ".category")
                    PACKAGE_VERSION=$(echo "$i" | jq -r ".version")

                    if [ $(mc ls minio-ci/{{$repo.bucket}}/$PACKAGE_NAME\-$PACKAGE_CATEGORY\-$PACKAGE_VERSION.package | wc -l) != "0" ] then
                        echo "Package $PACKAGE_CATEGORY/$PACKAGE_NAME already present, skipping"
                        continue
                    fi
          
                    PACKS="$PACKS $PACKAGE_CATEGORY/$PACKAGE_NAME"
               
                {{- if $repo.smart }}
                done

                BUILDSEQUENCE=$(FORMAT=json luet parallel-tools-commondeps $PACKS)

                echo "Buildsequence: $BUILDSEQUENCE"

                for i in $(echo "$BUILDSEQUENCE" | jq  -rc '.[][]'); do
                
                TOCOMPILE=$(echo "$i" | jq -rc '.[]'  | xargs echo)
                echo "Building $TOCOMPILE and waiting"

                # Send tasks in parallel, and wait for them
                for package in $TOCOMPILE; do
                IFS=/ read -a parts <<< $package
                PACKAGE_CATEGORY=${parts[0]}
                PACKAGE_NAME=${parts[1]}
                PACKAGE_VERSION=$(echo "$PKG_LIST" | jq -r ".packages[] | select(.name==\"$PACKAGE_NAME\" and .category==\"$PACKAGE_CATEGORY\").version")

                if [ $(mc ls minio-ci/{{$repo.bucket}}/$PACKAGE_NAME\-$PACKAGE_CATEGORY\-$PACKAGE_VERSION.package | wc -l) != "0" ]; then
                        echo "Package $PACKAGE_CATEGORY/$PACKAGE_NAME already present, skipping"
                        continue 1
                fi

                {{- end }}
                
                cat << EOF >task.yaml
                name: "Build $PACKAGE_CATEGORY/${PACKAGE_NAME}@${PACKAGE_VERSION} from {{$repo.name}} to minio"
                image: mocaccino/builder
                type: lxd
                {{- if eq $repo.arch "arm" }}
                queue: arm_lxd
                {{- else }}
                queue: lxd_mocaccino
                {{- end }}
                environment:
                - "SUDO="
                - CLEAN={{$repo.clean}}
                - REPO=https://github.com/mocaccinoOS/{{$repo.project}}.git
                - BRANCH=$REF
                - PACKAGES=$PACKAGE_CATEGORY/$PACKAGE_NAME
                - MINIO_ID=((minio_id))
                - DOCKER_BUILDKIT={{$repo.buildkit}}
                - MINIO_SECRET=((minio_secret))
                - MINIO_URL=((minio_url))
                - LUET_YES=true
                - DOCKER_SQUASH={{$repo.squash}}
                - DOCKER_USERNAME=((docker_user))
                - DOCKER_PASS=((docker_pass))
                - DOCKER_REGISTRY=((docker_registry))
                script:
                - sleep 5
                {{- if eq $repo.arch "arm" }}
                # Temporary workaround for delay on DHCP response
                - sleep 4
                # stop systemd-networkd to drop iface address from docker0
                # NOTE: this is needed until we use sabayon/builder-arm image
                - echo "[Match]" >> /etc/systemd/network/default_dhcp.network
                - echo 'Name=eth*' >> /etc/systemd/network/default_dhcp.network
                - systemctl daemon-reload
                - systemctl restart systemd-networkd
                - systemctl start docker
                - sleep 10
                - systemctl status docker
                - ip a
                {{- end }}
                - source /etc/profile
                - systemctl start docker
                - echo "Docker started"
                - mkdir -p \$HOME/.docker
                - 'echo "{\"experimental\": \"enabled\",\"auths\": { \"https://index.docker.io/v1/\": {}}}" > \$HOME/.docker/config.json'
                - docker login -u \$DOCKER_USERNAME -p \$DOCKER_PASS \$DOCKER_REGISTRY
                {{- if eq $repo.arch "arm" }}
                - wget https://downloads.svc.sabayon.org/luet-cross-bin/luet-latest-linux-arm -O /usr/bin/luet && chmod a+x /usr/bin/luet
                - wget https://dl.minio.io/client/mc/release/linux-arm/mc -O /usr/bin/mc && chmod +x /usr/bin/mc 
                {{- else }}
                - luet upgrade
                {{- end }}
                - mc alias set minio-ci \$MINIO_URL \$MINIO_ID \$MINIO_SECRET
                - git clone \$REPO ./luet-repo && cd luet-repo && git checkout \$BRANCH -b build
                - mkdir \$PWD/build
                - chmod -R 777 \$PWD/build
                - mc mirror  --exclude '*.gz' minio-ci/{{$repo.bucket}}/ \$PWD/build
                - BUILD_ARGS="{{$repo.build_args}} --config ./conf/luet.yaml " make rebuild
                - mc cp --recursive \$PWD/build/*.yaml minio-ci/{{$config.testing_bucket}}/
                - ls -l build
                EOF
                mottainai-cli -p build task create --yaml task.yaml

                {{- if $repo.smart }}
                done # Done tocompile

                # Now let's wait
                for package in $TOCOMPILE; do
                  IFS=/ read -a parts <<< $package
                  PACKAGE_CATEGORY=${parts[0]}
                  PACKAGE_NAME=${parts[1]}
                  PACKAGE_VERSION=$(echo "$PKG_LIST" | jq -r ".packages[] | select(.name==\"$PACKAGE_NAME\" and .category==\"$PACKAGE_CATEGORY\").version")

                  echo "Checking package $PACKAGE_CATEGORY/$PACKAGE_NAME @ $PACKAGE_VERSION is built"
                  while ! ( [ $(mc ls minio-ci/{{$config.testing_bucket}}/$PACKAGE_NAME\-$PACKAGE_CATEGORY\-$PACKAGE_VERSION.metadata | wc -l) != "0" ] )
                  do
                      echo "Package $PACKAGE_CATEGORY/$PACKAGE_NAME @ $PACKAGE_VERSION not built yet, sleeping"
                      sleep 20
                  done
                done # Done waiting
                {{- end }}

                done # Done build sequence
                EOB
      - task: wait-for-packages
        timeout: 1h30m
        input_mapping:
         repository: {{$repo.name}}
        config:
          inputs:
          - name: repository
          platform: linux
          image_resource:
            type: registry-image
            source: { repository: quay.io/mocaccino/extra }
          run:
            path: "/bin/sh"
            args: 
            - -ce
            - |
                ls -liah
                ls -liah repository
                REF=$(cat repository/.git/ref)
                luet uninstall -y repository/mocaccino-extra repository/mocaccino-micro repository/mocaccino-musl-universe
                luet install -y repository/mocaccino-extra-stable repository/mocaccino-micro-stable repository/mocaccino-musl-universe-stable
                luet install -y development/make dev-util/mottainai-cli vcs/git shells/bash utils/jq net-fs/minio-client
                mc alias set minio-ci ((minio_url)) ((minio_id)) ((minio_secret))
               
                # Luet tree package list
                #PKG_LIST=$(luet tree pkglist --tree repository/ -o json)
                if [ -e "repository/packages" ]; then 
                    PKG_LIST=$(luet tree pkglist --tree repository/packages -o json)
                else 
                    PKG_LIST=$(luet tree pkglist --tree repository/multi-arch --tree repository/{{$repo.arch}} -o json)
                fi  

                # For each package in the tree, get the path where the spec resides
                # e.g. packages/acct-group/amavis/0/
                for i in $(echo "$PKG_LIST" | jq -rc '.packages[]'); do

                    PACKAGE_PATH=$(echo "$i" | jq -r ".path")
                    PACKAGE_NAME=$(echo "$i" | jq -r ".name")
                    PACKAGE_CATEGORY=$(echo "$i" | jq -r ".category")
                    PACKAGE_VERSION=$(echo "$i" | jq -r ".version")
                    echo "Checking package $PACKAGE_CATEGORY/$PACKAGE_NAME @ $PACKAGE_VERSION is built"
                    while ! ( [ $(mc ls minio-ci/{{$config.testing_bucket}}/$PACKAGE_NAME\-$PACKAGE_CATEGORY\-$PACKAGE_VERSION.metadata | wc -l) != "0" ] )
                    do
                        echo "Package $PACKAGE_CATEGORY/$PACKAGE_NAME @ $PACKAGE_VERSION not built yet, sleeping"
                        sleep 20
                    done
                done
      - task: prune-repo
        input_mapping:
         repository: {{$repo.name}}
        config:
          inputs:
          - name: repository
          platform: linux
          image_resource:
            type: registry-image
            source: { repository: quay.io/mocaccino/extra }
          run:
            path: "/bin/sh"
            args: 
            - -ce
            - |
                luet uninstall -y repository/mocaccino-extra repository/mocaccino-micro repository/mocaccino-musl-universe
                luet install -y repository/mocaccino-extra-stable repository/mocaccino-micro-stable repository/mocaccino-musl-universe-stable
                luet install -y development/make dev-util/mottainai-cli vcs/git shells/bash utils/jq net-fs/minio-client
                mc alias set minio-ci ((minio_url)) ((minio_id)) ((minio_secret))
                mc find minio-ci/{{$config.testing_bucket}} --older-than 1d --exec "mc rm {}"
                done

{{ end }}
