# load the config provided when evaluating the template
{{ $config := (datasource "config") }}
---
resources:

{{ range $_, $repo := $config.repositories }}
- name: {{$repo.name}}
  check_every: 10m
  type: git
  source:
    uri: https://github.com/mocaccinoOS/{{$repo.project}}
    branch: {{$repo.branch}}
{{ end }}

jobs:
{{ range $_, $repo := $config.repositories }}
  - name: prune-{{$repo.name}}
    plan:
      - get: {{$repo.name}}
      - task: prune-repo
        input_mapping:
         repository: {{$repo.name}}
        config:
          inputs:
          - name: repository
          platform: linux
          image_resource:
            type: registry-image
            source: { repository: quay.io/mocaccino/extra }
          run:
            path: "/bin/sh"
            args: 
            - -ce
            - |
                luet uninstall repository/mocaccino-extra repository/mocaccino-micro repository/mocaccino-musl-universe
                luet install -y repository/mocaccino-extra-stable repository/mocaccino-micro-stable repository/mocaccino-musl-universe-stable
                luet install -y development/make dev-util/mottainai-cli vcs/git shells/bash utils/jq net-fs/minio-client
                mc alias set minio-ci ((minio_url)) ((minio_id)) ((minio_secret))
               
                # Luet tree package list
                #PKG_LIST=$(luet tree pkglist --tree repository/ -o json)
                if [ -e "repository/packages" ]; then 
                    PKG_LIST=$(luet tree pkglist --tree repository/packages -o json)
                else 
                    PKG_LIST=$(luet tree pkglist --tree repository/multi-arch --tree repository/{{$repo.arch}} -o json)
                fi  
                echo "Pruning old packages from repository"
                for a in $(mc find minio-ci/{{$repo.bucket}} --regex '.*.package.*|.*.metadata.yaml$' --json |  jq -r '.key' ); do

                    # For each package in the tree, get the path where the spec resides
                    # e.g. packages/acct-group/amavis/0/
                    for i in $(echo "$PKG_LIST" | jq -rc '.packages[]'); do

                        PACKAGE_PATH=$(echo "$i" | jq -r ".path")
                        PACKAGE_NAME=$(echo "$i" | jq -r ".name")
                        PACKAGE_CATEGORY=$(echo "$i" | jq -r ".category")
                        PACKAGE_VERSION=$(echo "$i" | jq -r ".version")
                        if echo $a | grep -q "$PACKAGE_NAME\-$PACKAGE_CATEGORY\-$PACKAGE_VERSION"; then
                            continue 2
                        fi
                    done

                # echo "$a pending deletion"
                mc rm $a

                done
{{ end }}
